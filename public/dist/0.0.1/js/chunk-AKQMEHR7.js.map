{
  "version": 3,
  "sources": ["../../../../src/globals.js", "../../../../node_modules/@azizka/router/src/utils.js", "../../../../node_modules/@azizka/router/src/router.js", "../../../../node_modules/@azizka/router/src/route-navigator.js", "../../../../node_modules/@azizka/router/src/mocks/location-mock.js", "../../../../node_modules/@azizka/router/src/mocks/history-mock.js", "../../../../node_modules/@azizka/router/index.js", "../../../../src/client/globals.js", "../../../../src/client/utils.js"],
  "sourcesContent": ["const PAGE_ROOT = '/';\n\nconst LANGUAGES = {\n  kz: { \n    image: '/images/flags/kz.svg',\n    label: '\u049A\u0430\u0437\u0430\u049B\u0448\u0430'\n  },\n  ru: { \n    image: '/images/flags/ru.svg',\n    label: '\u0420\u0443\u0441\u0441\u043A\u0438\u0439'\n  },\n  en: { \n    image: '/images/flags/en.svg',\n    label: 'English'\n  }\n};\n\nconst DEFAULT_LANGUAGE = 'kz';\n\nmodule.exports = {\n  PAGE_ROOT,\n  LANGUAGES,\n  DEFAULT_LANGUAGE\n};\n", "function trimSlashes(path) {\n  return path.replace(/\\/$/, '').replace(/^\\//, '');\n}\n\nfunction transformURL(url, currentPath, root) {\n  const newUrl = url.trim();\n  const splits = newUrl.split('?');\n\n  let path = splits[0].trim();\n  const query = splits[1]?.trim();\n\n  if(!path) {\n    path = currentPath;\n  } else {\n    if(root !== '/') {\n      path = path.replace(root, '');\n    }\n\n    path = trimSlashes(path);\n  }\n\n  if(!query) {\n    return path;\n  }\n\n  return `${path}?${query}`;\n}\n\nfunction parseQuery(query) {\n  const data = {};\n\n  let search = query;\n\n  if(query[0] === '?') {\n    search = query.substring(1);\n  }\n\n  search.split('&').forEach(row => {\n    const parts = row.split('=');\n\n    if(parts[0] !== '') {\n      const key = decodeURIComponent(parts[0]);\n      const value = parts[1] === undefined ? '1' : parts[1];\n\n      data[key] = value;\n    }\n  });\n\n  return data;    \n}\n\nfunction parseRouteRule(route) {\n  if(typeof route === 'string') {\n    const uri = trimSlashes(route);\n\n    const rule = uri\n      .replace(/([\\\\\\/\\-\\_\\.])/g, '\\\\$1')\n      .replace(/\\{[a-zA-Z]+\\}/g, '(:any)')\n      .replace(/\\:any/g, '[\\\\w\\\\-\\\\_\\\\.]+')\n      .replace(/\\:word/g, '[a-zA-Z]+')\n      .replace(/\\:num/g, '\\\\d+');\n\n    return new RegExp(`^${rule}$`, 'i');\n  }\n\n  return route;\n}\n\nmodule.exports = {\n  trimSlashes,\n  transformURL,\n  parseQuery,\n  parseRouteRule\n};\n", "const { trimSlashes, parseRouteRule } = require('./utils');\n\nclass Router {\n  routes = [];\n  root = '/';\n  before;\n  page404;\n\n  constructor(options) {\n    this.before = options?.before;\n    this.page404 = options?.page404;\n\n    if(options?.root) {\n      this.root = options.root === '/' ? '/' : `/${trimSlashes(options.root)}/`;\n    }\n\n    if(options?.routes) {\n      this.addRoutes(options.routes);\n    }\n  }\n\n  get rootPath() {\n    return this.root;\n  }\n\n  addRoutes(routes) {\n    for(const route of routes) {\n      this.add(route.rule, route.handler, route.options);\n    }\n  }\n\n  add(rule, handler, options) {\n    this.routes.push({\n      rule: parseRouteRule(rule),\n      handler,\n      options\n    });\n\n    return this;\n  }\n\n  remove(param) {\n    this.routes.some((route, i) => {\n      if(route.handler === param || route.rule === parseRouteRule(param)) {\n        this.routes.splice(i, 1);\n\n        return true;\n      }\n\n      return false;\n    });\n    \n    return this;\n  } \n\n  findRoute(currentPath) {    \n    for(const route of this.routes) {\n      const match = currentPath.match(route.rule);\n\n      if(match) {\n        return {\n          match,\n          route\n        };\n      }\n    }\n  }\n\n  async processUrl(currentPath, currentQuery, state) {\n    const doBreak = await this.before?.({\n      fragment: currentPath,\n      query: currentQuery,\n      state\n    });\n\n    if(!doBreak) {\n      const found = this.findRoute(currentPath);\n\n      if(!found) {\n        await this.page404?.({\n          fragment: currentPath,\n          query: currentQuery,\n          state\n        });\n      } else {\n        found.match.shift();\n\n        const page = {\n          fragment: currentPath,\n          query: currentQuery,\n          match: found.match,\n          options: found.route.options,\n          state\n        };\n\n        await found.route.handler?.(page);\n      }\n    }\n  }\n}\n\nmodule.exports = {\n  Router\n};\n", "const { transformURL, trimSlashes, parseQuery } = require('./utils');\n\nclass RouteNavigator {\n  router;\n  popStateHandler;\n\n  constructor(router) {\n    this.router = router;\n\n    this.popStateHandler = () => {\n      router.processUrl(this.fragment, this.query, history.state);\n    };\n  }\n\n  get fragment() {\n    let value = decodeURI(location.pathname);\n  \n    if(this.router.rootPath !== '/') {\n      value = value.replace(this.router.rootPath, '');\n    }\n  \n    return trimSlashes(value);\n  }\n\n  get query() {\n    return parseQuery(location.search);\n  }\n\n  async redirectTo(url, state) {\n    const newUrl = transformURL(url, this.fragment, this.router.rootPath);  \n\n    history.replaceState(state, '', this.router.rootPath + newUrl);\n\n    const currentPath = this.fragment;\n    const currentQuery = this.query;\n    \n    await this.router.processUrl(currentPath, currentQuery, state);\n  }\n\n  async navigateTo(url, state) {\n    const newUrl = transformURL(url, this.fragment, this.router.rootPath);  \n    \n    history.pushState(state, '', this.router.rootPath + newUrl);\n\n    const currentPath = this.fragment;\n    const currentQuery = this.query;\n    \n    await this.router.processUrl(currentPath, currentQuery, state);\n  }\n\n  refresh() {\n    return this.redirectTo(this.fragment + location.search, history.state);\n  } \n\n  addUriListener() {\n    window.addEventListener('popstate', this.popStateHandler);\n  }\n\n  removeUriListener() {\n    window.removeEventListener('popstate', this.popStateHandler);\n  }\n}\n\nmodule.exports = {\n  RouteNavigator\n};\n", "class LocationMock {\n  pathname = '';\n  search = '';\n}\n\nmodule.exports = {\n  LocationMock\n};\n", "class HistoryMock {\n  location;\n\n  constructor(location) { \n    this.location = location;\n  }\n\n  replaceState(state, data, path) {\n    this.changeLocation(path);\n  }\n\n  pushState(state, data, path) {\n    this.changeLocation(path);\n  }\n\n  changeLocation(path) {\n    let splits = path?.split?.('?');\n\n    if(splits) {\n      this.location.pathname = splits[0];\n\n      if(splits.length > 1) {\n        this.location.search = '?' + splits[1];\n      }\n    }\n  }\n}\n\nmodule.exports = {\n  HistoryMock\n};\n", "const { Router } = require('./src/router');\n\nconst { RouteNavigator } = require('./src/route-navigator');\n\nconst { trimSlashes, transformURL, parseQuery, parseRouteRule } = require('./src/utils');\n\nconst { LocationMock } = require('./src/mocks/location-mock');\nconst { HistoryMock } = require('./src/mocks/history-mock');\n\nmodule.exports = {\n  Router,\n\n  RouteNavigator,\n\n  trimSlashes,\n  transformURL,\n  parseQuery,\n  parseRouteRule,\n\n  LocationMock,\n  HistoryMock\n};\n", "const { Router, RouteNavigator } = require('@azizka/router');\n\nconst { PAGE_ROOT } = require('../globals');\n\nconst router = new Router({ root: PAGE_ROOT });\nconst routeNavigator = new RouteNavigator(router);\n\nconst views = {};\nconst layouts = {};\n\nconst languages = {};\n\nconst context = {\n  page: undefined,\n  tr: undefined\n};\n\nmodule.exports = {\n  router,\n  routeNavigator,\n\n  views,\n  layouts,\n\n  languages,\n\n  context\n};\n", "const { routeNavigator, layouts } = require('./globals');\n\nasync function sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nasync function navigateHandler(event, elem) {\n  event.preventDefault();\n\n  const path = elem.getAttribute?.('href');\n\n  if(path) {\n    await routeNavigator.navigateTo(path);\n  }\n}\n\nasync function loadContent(parent, firstTime, layoutNames) {\n  let content;\n\n  if(firstTime || parent) {\n    content = parent || document.body;\n  } else {\n    let path = location.pathname + '?ajax=1&init=1&time=' + Date.now();\n\n    const layoutsToLoad = [];\n\n    for(let layout of layoutNames) {\n      if(!(layout in layouts)) {\n        layoutsToLoad.push(layout);\n      }\n    }\n\n    if(layoutsToLoad.length > 0) {\n      path += '&layouts=' + layoutsToLoad.join(',');\n    }\n\n    const html = await (await fetch(path)).text();\n    \n    content = document.createElement('div');\n\n    content.innerHTML = html;\n  }\n\n  return content;\n}\n\n\nasync function mount(elem) {\n  if(elem) {\n    await sleep(10);\n\n    elem.classList.remove('page-unmount');\n  }\n}\n\nasync function unmount(elem) {\n  if(elem) {\n    elem.classList.add('page-unmount');\n\n    await sleep(250);\n  }\n}\n\nmodule.exports = {\n  sleep,\n\n  navigateHandler,\n\n  loadContent,\n\n  mount,\n  unmount\n};\n"],
  "mappings": "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",
  "names": []
}
